{"version":3,"sources":["Showcard.jsx","Homepage.jsx","serviceWorker.js","index.js"],"names":["Showcard","react_default","a","createElement","movie","map","key","Title","className","src","Poster","alt","Year","Plot","Component","BasicExample","BrowserRouter","type","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","Homepage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6ihBAKqBA,mLAMf,OACIC,EAAAC,EAAAC,cAAA,UAEEC,IAAMC,IAAK,SAACD,GACV,OAAOH,EAAAC,EAAAC,cAAA,MAAMG,IAAQF,EAAMG,OAEzBN,EAAAC,EAAAC,cAAA,OAAKK,UAAY,QACjBP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAAQP,EAAAC,EAAAC,cAAA,OAAKM,IAAKL,EAAMM,OAAQC,IAAI,UAEnDV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SAAQP,EAAAC,EAAAC,cAAA,UAAKC,EAAMG,QAClCN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QAAf,IAAuBP,EAAAC,EAAAC,cAAA,SAAIC,EAAMQ,OACjCX,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QAAf,IAAuBP,EAAAC,EAAAC,cAAA,SAAIC,EAAMS,oBAlBbC,qCC6CvBC,MA/Bf,WACE,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UAAQc,KAAK,UAAShB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,aAAT,eAMxBlB,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWvB,OCrB7BwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAAcC,SAASC,eAAe,SDqHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f544abc3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport  {movie} from './movie.json';\r\n\r\n\r\nexport default class Showcard extends Component {\r\n\r\n\r\n\r\n    render() {\r\n\r\n      return (\r\n          <ul>\r\n          {\r\n            movie.map( (movie) => {\r\n              return <li   key = { movie.Title }\r\n                >\r\n                <div className = 'card'>\r\n                <div className=\"image\"><img src={movie.Poster} alt=\"film\"/>\r\n                </div>\r\n                <div className=\"content\">\r\n                  <div className=\"title\"><h5>{movie.Title}</h5></div>\r\n                  <div className=\"year\"> <p>{movie.Year}</p></div>\r\n                  <div className=\"plot\"> <p>{movie.Plot}</p></div>\r\n                </div>\r\n                </div>\r\n              </li>\r\n              ;\r\n            })\r\n          }\r\n          </ul>\r\n      );\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//\r\n// export default Showcard;\r\n","import React, { Component } from 'react';\r\nimport Showcard from './Showcard.jsx';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n// export default class Homepage extends Component {\r\n//\r\n//   render() {\r\n//     return (\r\n//       <div className=\"App\">\r\n//       <h1>Homepage</h1>\r\n// <button type=\"button\" onClick=\"BasicExample()\" >Showcard</button>\r\n//\r\n//       </div>\r\n//\r\n//     );\r\n//   }\r\n//\r\n// }\r\n\r\nfunction BasicExample() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <ul>\r\n          <li>\r\n          <button type=\"button\"><Link to=\"/Showcard\">Showcard</Link></button>\r\n\r\n          </li>\r\n\r\n        </ul>\r\n\r\n        <hr />\r\n\r\n        <Route exact path=\"/Showcard\" component={Showcard} />\r\n\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <h2>Home</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default BasicExample;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Homepage from './Homepage.jsx';\nimport Showcard from './Showcard.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Homepage />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}